import java.util.*;
import java.io.*;

public class Main {
    static Kattio io = new Kattio(System.in, System.out);
    public static void main(String[] args) throws IOException{
        int anzahl = io.getInt();
        int laenge = io.getInt();

        Queue<Integer> queue = new ArrayDeque<Integer>();
        Boolean[] visited = new Boolean[(int) Math.pow(2,laenge)];
        Arrays.fill(visited, false);
        for (int i=0; i<anzahl; i++){
            String a = io.getWord();
            queue.add(Integer.parseInt(a,2));
            visited[Integer.parseInt(a, 2)] = true;
        }

        int zuletztBesucht = 0;

        while(!queue.isEmpty()){
            int v = queue.remove();
            //System.out.println(v + "\n");
	    for(int i = 0; i < laenge; ++i) {
                //System.out.println(a);
		int a = v ^(1<<i);
                if (!visited[a]){
                    queue.add(a);
                    visited[a] = true;
                    zuletztBesucht = a;
                }
            }
        }
	String res = Integer.toBinaryString(zuletztBesucht);
	while(res.length() < laenge) res = "0" + res;
        System.out.println(res);
    }
}


/** Simple yet moderately fast I/O routines.
 *
 * Example usage:
 *
 * Kattio io = new Kattio(System.in, System.out);
 *
 * while (io.hasMoreTokens()) {
 *    int n = io.getInt();
 *    double d = io.getDouble();
 *    double ans = d*n;
 *
 *    io.println("Answer: " + ans);
 * }
 *
 * io.close();
 *
 *
 * Some notes:
 *
 * - When done, you should always do io.close() or io.flush() on the
 *   Kattio-instance, otherwise, you may lose output.
 *
 * - The getInt(), getDouble(), and getLong() methods will throw an
 *   exception if there is no more data in the input, so it is generally
 *   a good idea to use hasMoreTokens() to check for end-of-file.
 *
 * @author: Kattis
 */

class Kattio extends PrintWriter {
  public Kattio(InputStream i) {
    super(new BufferedOutputStream(System.out));
    r = new BufferedReader(new InputStreamReader(i));
  }
  public Kattio(InputStream i, OutputStream o) {
    super(new BufferedOutputStream(o));
    r = new BufferedReader(new InputStreamReader(i));
  }

  public boolean hasMoreTokens() {
    return peekToken() != null;
  }

  public int getInt() {
    return Integer.parseInt(nextToken());
  }

  public double getDouble() {
    return Double.parseDouble(nextToken());
  }

  public long getLong() {
    return Long.parseLong(nextToken());
  }

  public String getWord() {
    return nextToken();
  }

  private BufferedReader r;
  private String line;
  private StringTokenizer st;
  private String token;

  private String peekToken() {
    if (token == null)
      try {
        while (st == null || !st.hasMoreTokens()) {
          line = r.readLine();
          if (line == null) return null;
          st = new StringTokenizer(line);
        }
        token = st.nextToken();
      } catch (IOException e) { }
    return token;
  }

  private String nextToken() {
    String ans = peekToken();
    token = null;
    return ans;
  }
}
