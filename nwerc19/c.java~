import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.StringTokenizer;

public class c {
    public static void main(String[] args) {
	Kattio io = new Kattio(System.in);
	int n = io.getInt();
	int[] l = new int[n];
	int[] r = new int[n];
	for(int i = 0; i < n; ++i) {
	    l[i] = io.getInt();
	    r[i] = io.getInt();
	}
	int p = io.getInt();
	int[] x = new int[p];
	for(int i = 0; i < p; ++i) {
	    x[i] = io.getInt();
	}
	HashMap<Integer, ArrayList<Integer>> cxs = new HashMap<Integer, ArrayList<Integer>();
	int px = 0;
	for(int i = 0; i < n; ++i) {
	    cxs.put(i, new ArrayList<Integer>());
	    int counter = 0;
	    if(px > 0) {
		--px;
	    }
	    while(px < p && x[px] < l[i]) {
		++px;
	    }
	    while(px < p && x[px] <= r[i]) {
		cxs.get(i).add(x[px]);
		++counter;
		++px;
	    }
	    if(counter > 2) {
		io.println("impossible");
		io.flush();
		io.close();
		return;
	    }
	}
    }
    LinkedList<Integer> add = new LinkedList<Integer>();
    for(int i = 0; i < n; ++i) {
	if(cxs.get(i).size() >= 2) {
	    continue;
	}
	if(cxs.get(i).size() == 0) {
	    if(cxs.containsKey(i+1) && cxs.get(i+1).size() < 2 && l[i+1] == r[i]) {
		cxs.get(i+1).add(r[i]);
		cxs.get(i).add(r[i]);
		add.add(r[i]);
		cxs.get(i).add(l[i]+1);
		add.add(l[i]+1);
	    } else {
		cxs.get(i).add(l[i]+1);
		add.add(l[i]+1);
		cxs.get(i).add(l[i]+2);
		add.add(l[i]+2);
	    }
	}
	if(cxs.get(i).size() ==1) {
	    
	}
    }
}
