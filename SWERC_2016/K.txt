import java.util.*;
import java.io.*;

public class K{
	public static void main(String[] args) throws Exception {
		BufferedReader scan = new BufferedReader(new InputStreamReader(System.in));
		
		int k = Integer.parseInt(scan.readLine());
		HashMap<String,Integer> V3d = new HashMap<String,Integer>();
		ArrayList<ArrayList<Integer>> adjList3d = new ArrayList<ArrayList<Integer>>();
		
		HashMap<String,Integer> V2d = new HashMap<String,Integer>();
		ArrayList<ArrayList<Integer>> adjList2d = new ArrayList<ArrayList<Integer>>();
		
		int nodes3d = 0;
		int nodes2d = 0;
		
		for(int i = 0; i < k; ++i){
            String[] line = scan.readLine().split(" ");

            StringBuilder s11 = new StringBuilder();
            StringBuilder s12 = new StringBuilder();
            StringBuilder s21 = new StringBuilder();
            StringBuilder s22 = new StringBuilder();
            for(int j = 0; j < 2; ++j){
                s11.append(line[j] + " ");
                s12.append(line[j] + " ");
            }
            s11.append(line[2]);
            for(int j = 3; j < 5; ++j){
                s21.append(line[j] + " ");
                s22.append(line[j] + " ");
            }
            s21.append(line[5]);
            
            String v1 = s11.toString();
            String v12 = s12.toString();
            String v2 = s21.toString();
            String v22 = s22.toString();
			if(!V3d.containsKey(v1)){
				V3d.put(v1,nodes3d++);
				adjList3d.add(new ArrayList<Integer>());
			}
			if(!V3d.containsKey(v2)){
				V3d.put(v2,nodes3d++);
				adjList3d.add(new ArrayList<Integer>());
			}

            if(!v1.equals(v2)){
                adjList3d.get(V3d.get(v1)).add(V3d.get(v2));
                adjList3d.get(V3d.get(v2)).add(V3d.get(v1));
            }
			
			if(!V2d.containsKey(v12)){
				V2d.put(v12, nodes2d++);
				adjList2d.add(new ArrayList<Integer>());
			}
			if(!V2d.containsKey(v22)){
				V2d.put(v22, nodes2d++);
				adjList2d.add(new ArrayList<Integer>());
			}
			
            if(!v12.equals(v22)){
                adjList2d.get(V2d.get(v12)).add(V2d.get(v22));
                adjList2d.get(V2d.get(v22)).add(V2d.get(v12));
            }
		}
		
		if(bfs(adjList3d)){
			System.out.println("True closed chains");
		} else {
			System.out.println("No true closed chains");
		}
		if(bfs(adjList2d)){
			System.out.println("Floor closed chains");
		} else {
			System.out.println("No floor closed chains");
		}
		
		scan.close();
	}
	
	public static boolean bfs(ArrayList<ArrayList<Integer>> adjList){
		int[] visited = new int[adjList.size()];
		for(int i = 0; i < visited.length; ++i) {
		    visited[i] =-1;
		}
		int[] pre = new int[adjList.size()];
        int nodes = adjList.size()-1;
		Queue<Integer> q = new LinkedList<Integer>();
		
		q.add(0);
		visited[0] = 0;
		pre[0] = -1;
		int ind = 0;
		while(!q.isEmpty()){
			int v = q.poll();
			for(int i = 0; i < adjList.get(v).size(); ++i){
				int w = adjList.get(v).get(i);
				if(visited[w] != -1 && pre[v] != w && v != w && visited[w] != v) {
					return true;
				}
                if(visited[w] == -1){
                    pre[w] = v;
                    q.add(w);
		    visited[w] = v;
		    --nodes;
                }
			}
			if(nodes > 0 && q.isEmpty()) {
				ind = allVisited(ind, visited);
				q.add(ind);
				visited[ind] = ind;
				--nodes;
			}
		}
		return false;
	}
	
	public static int allVisited(int v, int[] b){
		for(int i = v; i < b.length; ++i)
			if(b[i] == -1) return i;
		return -1;
	}
}
