import java.util.Scanner;
import java.util.TreeSet;
import java.util.PriorityQueue;
import java.util.Arrays;

public class ebox {

    public static void main(String[] args) {
	Scanner s = new Scanner(System.in);
	int n = s.nextInt();
	int k = s.nextInt();
	Show[] S = new Show[n];
	for(int i = 0; i < n; i++) {
	    Show cur = new Show(s.nextInt(), s.nextInt());
	    S[i] = cur;
	}
	Arrays.sort(S);
	for(int i = 0; i < n-1; i++) {
	    if(S[i+1].s == S[i].s && S[i+1].f == S[i].f) S[i+1].id = S[i].id + 1;
	}
	TreeSet<Show> t = new TreeSet<Show>();
	int sum = 0;
	for(int i = 0; i < n; i++) {
	    if(t.size() < k) {
		t.add(S[i]);
		sum++;
	    } else {
		Show cmp = new Show(S[i].s, S[i].s);
		cmp.id = Integer.MAX_VALUE;
		Show rm = t.floor(cmp);
		if(rm == null) continue;
		t.remove(rm);
		t.add(S[i]);
		sum++;
	    }
	}
	System.out.println(sum);
    }
}

class Show implements Comparable<Show> {

    int s;
    int f;
    int num = 0;
    int id = 0;

    public Show(int s, int f) {
	this.s = s;
	this.f = f;
    }

    public int compareTo(Show o) {
	if(Integer.compare(this.f, o.f) != 0) {
	    return Integer.compare(this.f, o.f);
	} else if(Integer.compare(this.s, o.s) != 0) {
	    return Integer.compare(this.s, o.s);
	} else {
	    return Integer.compare(this.id, o.id);
	}
    }
}
