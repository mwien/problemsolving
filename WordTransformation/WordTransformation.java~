import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.HashMap;

public class WordTransformation {

    public static void BFS(Vertex[] graph, int src, int target) {
	Queue<Integer> queue = new LinkedList<Integer>();
	queue.add(graph[src]);
	graph[src].visited = true;
	graph[src].distance = 0;
	while(!queue.isEmpty()) {
	    Vertex u = queue.poll();
	    if(u.id == target) return;
	    for(Vertex v : u.adj) {
		if(v.visited = true) continue;
		v.visited = true;
		v.distance = u.distance++;
		queue.add(v);
	    }
	}
    }

    public static boolean compStrings(String a, String b) {
	if(a.length() != b.length()) return false;
	int cnt = 0;
	for(int i = 0; i < a.length(); i++) {
	    if(a.charAt(i) != b.charAt(i)) cnt++;
	}
	if(cnt == 1) return true;
	else return false;
    }

    public static void main(String[] args) throws IOException {
	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	String in;
	int cnt = 0;
	HashMap<String, Integer> dict = new HashMap<String, Integer>();
	ArrayList<String> ind = new ArrayList<String>();
	while(!(in = br.readLine()).equals("*")) {
	    dict.put(in, cnt++);
	    ind.add(in);
	}
	Vertex[] graph = new Vertex[dict.size()];
	for(int i = 0; i < dict.size(); i++) {
	    String a = ind.get(i);
	    int f = hm.get(a);
	    graph[f] = new Vertex(int f);
	    for(int j = 0; j < i; j++) {
		String b = ind.get(j);
		if(compareStrings(a, b)) {
		    int s = hm.get(b);
		    graph[f].adj.add(graph[s]);
		    graph[s].adj.add(graph[f]);
		}
	    }
	}
	String start;
	String end;
	while(!(in = br.readLine()).isEmpty()) {
	    String[] input = in.split(" ");
	    start = input[0];
	    end = input[1];
	    int src = hm.get(start);
	    int target = hm.get(end);
	    BFS(graph, src, target);
	    System.out.println(start + " " + end + " " + graph[target].distance);
	    for(int i = 0; i < hm.size(); i++) {
		graph[i].visited = false;
		graph[i].distance = Integer.MAX_VALUE;
	    }
	}
    }
}

class Vertex {
    public int id;
    public int visited = false;
    public int distance = Integer.MAX_VALUE;
    public ArrayList<Vertex> adj = new ArrayList<Vertex>();

    public Vertex(int id) {
	this.id = id;
    }
}